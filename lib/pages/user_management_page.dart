import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:phone_system_app/services/backend/backend_services.dart';
import 'package:phone_system_app/models/user.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart'; // Add this import
import 'package:flutter/cupertino.dart';
import 'package:uuid/uuid.dart'; // Add this import at the top

class UserManagementController extends GetxController {
  final RxList<AppUser> users = <AppUser>[].obs;
  final RxBool isLoading = false.obs;
  final RxString error = ''.obs;

  @override
  void onInit() {
    super.onInit();
    fetchUsers();
  }

  Future<void> fetchUsers() async {
    try {
      isLoading.value = true;
      final response = await Supabase.instance.client.from('users').select();
      var usersList =
          (response as List).map((user) => AppUser.fromJson(user)).toList();

      // Sort users: role 1 first, then by name
      usersList.sort((a, b) {
        if (a.role == 1 && b.role != 1) return -1;
        if (a.role != 1 && b.role == 1) return 1;
        // If roles are same, sort by name
        return (a.name ?? '').compareTo(b.name ?? '');
      });

      users.value = usersList;
    } catch (e) {
      error.value = e.toString();
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> updateUserPassword(String uid, String newPassword) async {
    try {
      isLoading.value = true;
      await Supabase.instance.client
          .from('users')
          .update({'password': newPassword})
          .eq('uid', uid)
          .select();
      await fetchUsers();
      Fluttertoast.showToast(
        msg: "تم تحديث كلمة المرور بنجاح",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
    } catch (e) {
      error.value = e.toString();
      Fluttertoast.showToast(
        msg: "حدث خطأ أثناء تحديث كلمة المرور",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> updateUserSecpass(String uid, int newSecpass) async {
    try {
      isLoading.value = true;
      await Supabase.instance.client
          .from('users')
          .update({'secpass': newSecpass})
          .eq('uid', uid)
          .select();
      await fetchUsers();
      Fluttertoast.showToast(
        msg: "تم تحديث كلمة المرور الثانية بنجاح",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
    } catch (e) {
      error.value = e.toString();
      Fluttertoast.showToast(
        msg: "حدث خطأ أثناء تحديث كلمة المرور الثانية",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> createUser(
      String email, String password, String name, int role, int secpass) async {
    try {
      isLoading.value = true;

      // First create the user in Supabase Auth
      final authResponse = await Supabase.instance.client.auth.signUp(
        email: email,
        password: password,
      );

      if (authResponse.user == null) {
        throw Exception('Failed to create user authentication');
      }

      // Get the UUID generated by Supabase Auth
      final userId = authResponse.user!.id;

      // Now create the user record in the users table with the same UUID
      await Supabase.instance.client.from('users').insert({
        'uid': userId, // Use the UUID from authentication
        'name': name,
        'role': role,
        'secpass': secpass,
        'created_at': DateTime.now().toIso8601String(),
      }).select();

      await fetchUsers();
      Fluttertoast.showToast(
        msg: "تم إنشاء المستخدم بنجاح",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
    } catch (e) {
      error.value = e.toString();
      Fluttertoast.showToast(
        msg: "حدث خطأ أثناء إنشاء المستخدم: ${e.toString()}",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      rethrow; // Rethrow to handle in the UI
    } finally {
      isLoading.value = false;
    }
  }
}

class UserManagementPage extends StatelessWidget {
  final controller = Get.put(UserManagementController());
  final currentUserEmail = Supabase.instance.client.auth.currentUser?.email;

  @override
  Widget build(BuildContext context) {
    if (currentUserEmail != 'eslam.elnini@km.com') {
      return Scaffold(
        backgroundColor: Colors.white,
        body: Center(
          child: Text('غير مصرح لك بالدخول لهذه الصفحة',
              style: TextStyle(fontSize: 18, color: Colors.red)),
        ),
      );
    }

    return DefaultTabController(
      length: 2,
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 0,
          iconTheme: IconThemeData(color: Colors.black),
          title: Text('إدارة المستخدمين',
              style:
                  TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
          bottom: TabBar(
            indicatorColor: Colors.red,
            labelColor: Colors.red,
            unselectedLabelColor: Colors.grey,
            indicatorWeight: 3,
            tabs: [
              Tab(
                icon: Icon(Icons.people),
                text: 'المستخدمين',
              ),
              Tab(
                icon: Icon(Icons.person_add),
                text: 'إضافة مستخدم',
              ),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            _BuildUserList(controller: controller),
            CreateUserTab(controller: controller),
          ],
        ),
      ),
    );
  }
}

class CreateUserTab extends StatefulWidget {
  final UserManagementController controller;

  CreateUserTab({required this.controller});

  @override
  _CreateUserTabState createState() => _CreateUserTabState();
}

class _CreateUserTabState extends State<CreateUserTab> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _secpassController = TextEditingController();
  int _selectedRole = 2; // Change initial value to 2 (regular user)

  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return 'البريد الإلكتروني مطلوب';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: AnimationLimiter(
        child: Padding(
          padding: EdgeInsets.all(20),
          child: Form(
            key: _formKey,
            child: Column(
              children: AnimationConfiguration.toStaggeredList(
                duration: const Duration(milliseconds: 375),
                childAnimationBuilder: (widget) => SlideAnimation(
                  horizontalOffset: 50.0,
                  child: FadeInAnimation(
                    child: widget,
                  ),
                ),
                children: [
                  // Header Section
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red.shade400, Colors.red.shade600],
                      ),
                      borderRadius: BorderRadius.circular(15),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.person_add, color: Colors.white, size: 32),
                        SizedBox(width: 16),
                        Text(
                          'إضافة مستخدم جديد',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 30),

                  // Form Fields
                  _buildAnimatedTextField(
                    controller: _nameController,
                    label: 'اسم المستخدم',
                    icon: Icons.person,
                    validator: (value) => value?.isEmpty ?? true
                        ? 'يرجى إدخال اسم المستخدم'
                        : null,
                  ),
                  SizedBox(height: 20),

                  _buildAnimatedTextField(
                    controller: _emailController,
                    label: 'البريد الإلكتروني',
                    icon: Icons.email,
                    validator: _validateEmail,
                    helperText: 'مثال: username@km.com',
                  ),
                  SizedBox(height: 20),

                  _buildAnimatedTextField(
                    controller: _passwordController,
                    label: 'كلمة المرور',
                    icon: Icons.lock,
                    isPassword: true,
                    validator: (value) =>
                        value!.length < 6 ? 'كلمة المرور قصيرة جداً' : null,
                  ),
                  SizedBox(height: 20),

                  _buildAnimatedTextField(
                    controller: _secpassController,
                    label: 'كلمة المرور الثانية',
                    icon: Icons.security,
                    keyboardType: TextInputType.number,
                    validator: (value) => int.tryParse(value ?? '') == null
                        ? 'أدخل رقماً صحيحاً'
                        : null,
                  ),
                  SizedBox(height: 20),

                  // Role Selection
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      borderRadius: BorderRadius.circular(15),
                      border: Border.all(color: Colors.grey.shade300),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'نوع المستخدم',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 10),
                        CupertinoSlidingSegmentedControl<int>(
                          backgroundColor: Colors.white,
                          thumbColor: Colors.red.shade400,
                          groupValue: _selectedRole,
                          children: {
                            2: _buildSegmentChild(
                                'مستخدم عادي', _selectedRole == 2),
                            1: _buildSegmentChild('مشرف', _selectedRole == 1),
                          },
                          onValueChanged: (int? value) {
                            if (value != null) {
                              setState(() => _selectedRole = value);
                            }
                          },
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 30),

                  // Submit Button
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red.shade400,
                      padding:
                          EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                    ),
                    onPressed: _submitForm,
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.add_circle, color: Colors.white),
                        SizedBox(width: 8),
                        Text(
                          'إنشاء المستخدم',
                          style: TextStyle(fontSize: 18, color: Colors.white),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildAnimatedTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPassword = false,
    String? Function(String?)? validator,
    TextInputType? keyboardType,
    String? helperText,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 5,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: TextFormField(
        controller: controller,
        obscureText: isPassword,
        keyboardType: keyboardType,
        validator: validator,
        decoration: InputDecoration(
          labelText: label,
          helperText: helperText,
          prefixIcon: Icon(icon, color: Colors.red.shade400),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(15),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(15),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(15),
            borderSide: BorderSide(color: Colors.red.shade400),
          ),
        ),
      ),
    );
  }

  Widget _buildSegmentChild(String text, bool isSelected) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Text(
        text,
        style: TextStyle(
          color: isSelected ? Colors.white : Colors.black,
          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
        ),
      ),
    );
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      final currentUser = Supabase.instance.client.auth.currentUser;

      // Check if the current user is authorized
      if (currentUser?.email != 'eslam.elnini@km.com') {
        Fluttertoast.showToast(
          msg: "غير مصرح لك بإضافة مستخدمين",
          toastLength: Toast.LENGTH_LONG,
          gravity: ToastGravity.CENTER,
          backgroundColor: Colors.red,
          textColor: Colors.white,
        );
        return;
      }

      try {
        await widget.controller.createUser(
          _emailController.text.trim(),
          _passwordController.text,
          _nameController.text.trim(),
          _selectedRole,
          int.parse(_secpassController.text),
        );

        // Clear form and refresh only if successful
        _nameController.clear();
        _emailController.clear();
        _passwordController.clear();
        _secpassController.clear();
        setState(() => _selectedRole = 2);
      } catch (e) {
        print('Error creating user: $e');
        // Error is already handled in the controller
      }
    }
  }
}

class _BuildUserList extends StatelessWidget {
  final UserManagementController controller;
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController secpassController = TextEditingController();

  _BuildUserList({required this.controller});

  Widget _buildUserCard(AppUser user, BuildContext context) {
    final isOwner = user.role == 1;

    return AnimationConfiguration.staggeredList(
      position: controller.users.indexOf(user),
      duration: const Duration(milliseconds: 375),
      child: SlideAnimation(
        verticalOffset: 50.0,
        child: FadeInAnimation(
          child: Card(
            color: Colors.white,
            elevation: isOwner ? 12 : 8,
            margin: EdgeInsets.symmetric(
              horizontal: isOwner ? 12 : 16,
              vertical: isOwner ? 16 : 8,
            ),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(24),
              side: isOwner
                  ? BorderSide(color: Colors.red.shade300, width: 2)
                  : BorderSide.none,
            ),
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(24),
                boxShadow: isOwner
                    ? [
                        BoxShadow(
                          color: Colors.red.withOpacity(0.1),
                          blurRadius: 15,
                          spreadRadius: 2,
                        ),
                      ]
                    : null,
              ),
              child: Padding(
                padding: EdgeInsets.all(isOwner ? 20.0 : 16.0),
                child: Column(
                  children: [
                    if (isOwner)
                      const Chip(
                        label: Text(
                          "المالك",
                          style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        backgroundColor: Colors.red,
                        padding:
                            EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                      ),
                    Row(
                      children: [
                        // Enhanced User Image
                        Hero(
                          tag: 'user_${user.uid}',
                          child: Container(
                            width: isOwner ? 100 : 80,
                            height: isOwner ? 100 : 80,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              border: Border.all(
                                color:
                                    isOwner ? Colors.red : Colors.red.shade200,
                                width: isOwner ? 3 : 2,
                              ),
                              boxShadow: [
                                BoxShadow(
                                  color: (isOwner ? Colors.red : Colors.black)
                                      .withOpacity(0.2),
                                  blurRadius: isOwner ? 15 : 10,
                                  spreadRadius: isOwner ? 3 : 2,
                                ),
                              ],
                            ),
                            child: ClipOval(
                              child: isOwner
                                  ? Stack(
                                      children: [
                                        Image.asset(
                                          'assets/images/owner.png',
                                          fit: BoxFit.cover,
                                        ),
                                        Container(
                                          decoration: BoxDecoration(
                                            gradient: LinearGradient(
                                              begin: Alignment.topCenter,
                                              end: Alignment.bottomCenter,
                                              colors: [
                                                Colors.transparent,
                                                Colors.red.withOpacity(0.3),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ],
                                    )
                                  : Image.asset(
                                      'assets/images/logo.png',
                                      fit: BoxFit.cover,
                                    ),
                            ),
                          ),
                        ),
                        SizedBox(width: isOwner ? 24 : 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                user.name ?? '',
                                style: TextStyle(
                                  fontSize: isOwner ? 24 : 20,
                                  fontWeight: FontWeight.bold,
                                  color: isOwner
                                      ? Colors.red
                                      : Colors.red.shade700,
                                  letterSpacing: isOwner ? 0.5 : 0,
                                ),
                              ),
                              SizedBox(height: isOwner ? 8 : 4),
                              Container(
                                padding: isOwner
                                    ? EdgeInsets.symmetric(
                                        horizontal: 12, vertical: 6)
                                    : null,
                                decoration: isOwner
                                    ? BoxDecoration(
                                        color: Colors.red.shade50,
                                        borderRadius: BorderRadius.circular(20),
                                      )
                                    : null,
                                child: Text(
                                  'كلمة المرور الثانية: ${user.secpass ?? 'غير محدد'}',
                                  style: TextStyle(
                                    fontSize: isOwner ? 18 : 16,
                                    color: isOwner
                                        ? Colors.red.shade700
                                        : Colors.grey[600],
                                    fontWeight: isOwner
                                        ? FontWeight.w600
                                        : FontWeight.normal,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: isOwner ? 24 : 16),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        ElevatedButton.icon(
                          icon: Icon(
                            isOwner ? Icons.admin_panel_settings : Icons.edit,
                            color: Colors.white,
                          ),
                          label: Text(
                            'تعديل كلمة المرور الثانية',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: isOwner ? 16 : 14,
                            ),
                          ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor:
                                isOwner ? Colors.red : Colors.red.shade400,
                            padding: isOwner
                                ? EdgeInsets.symmetric(
                                    horizontal: 24, vertical: 16)
                                : EdgeInsets.symmetric(
                                    horizontal: 16, vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius:
                                  BorderRadius.circular(isOwner ? 16 : 12),
                            ),
                            elevation: isOwner ? 6 : 4,
                          ),
                          onPressed: () => _showEditDialog(context, user),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _showEditDialog(BuildContext context, AppUser user) {
    secpassController.text = user.secpass?.toString() ?? '';
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text('تعديل كلمة المرور الثانية'),
        content: TextField(
          controller: secpassController,
          decoration: InputDecoration(
            labelText: 'كلمة المرور الثانية الجديدة',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          keyboardType: TextInputType.number,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('إلغاء'),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            onPressed: () {
              int? newSecpass = int.tryParse(secpassController.text);
              if (newSecpass != null) {
                controller.updateUserSecpass(user.uid!, newSecpass);
                Navigator.pop(context);
              }
            },
            child: Text('حفظ', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Obx(() {
      if (controller.isLoading.value) {
        return Center(
          child: CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Colors.red),
          ),
        );
      }

      return Container(
        color: Colors.white,
        child: AnimationLimiter(
          child: ListView.builder(
            padding: EdgeInsets.symmetric(vertical: 16),
            itemCount: controller.users.length,
            itemBuilder: (context, index) {
              return _buildUserCard(controller.users[index], context);
            },
          ),
        ),
      );
    });
  }
}
